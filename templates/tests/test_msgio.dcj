#include <cassert>
#include <queue>
#include <stdint.h>

static const int32_t TARGET = 12345;

std::queue<int8_t> queue8;
std::queue<int32_t> queue32;
std::queue<int64_t> queue64;

void PutChar(int32_t target, int8_t v) {
    assert(target == TARGET);
    queue8.push(v);
}

void PutInt(int32_t target, int32_t v) {
    assert(target == TARGET);
    queue32.push(v);
}

void PutLL(int32_t target, int64_t v) {
    assert(target == TARGET);
    queue64.push(v);
}

int8_t GetChar(int32_t target) {
    assert(target == TARGET);
    int8_t v = queue8.front();
    queue8.pop();
    return v;
}

int32_t GetInt(int32_t target) {
    assert(target == TARGET);
    int32_t v = queue32.front();
    queue32.pop();
    return v;
}

int64_t GetLL(int32_t target) {
    assert(target == TARGET);
    int64_t v = queue64.front();
    queue64.pop();
    return v;
}

#import "msgio.cpp"


int main() {
    int8_t value_int8_1 = 'a';
    int8_t value_int8_2 = 'b';
    put(TARGET, value_int8_1);
    get(TARGET, value_int8_2);
    assert(value_int8_2 == 'a');

    int32_t value_int32_1 = 123456;
    int32_t value_int32_2 = 234567;
    put(TARGET, value_int32_1);
    get(TARGET, value_int32_2);
    assert(value_int32_2 == 123456);

    int64_t value_int64_1 = 1e12;
    int64_t value_int64_2 = 1e11;
    put(TARGET, value_int64_1);
    get(TARGET, value_int64_2);
    assert(value_int64_2 == 1e12);

    struct ts {
        int8_t t1;
        int16_t t2;
        int32_t t3;
        int64_t t4;
    };
    ts value_ts_1 = {
        .t1 = 'c',
        .t2 = 987,
        .t3 = 345678,
        .t4 = int64_t(2e12),
    };
    ts value_ts_2 = {
        .t1 = 'd',
        .t2 = 876,
        .t3 = 456789,
        .t4 = int64_t(3e12),
    };
    put(TARGET, value_ts_1);
    get(TARGET, value_ts_2);
    assert(value_ts_2.t1 == 'c');
    assert(value_ts_2.t2 == 987);
    assert(value_ts_2.t3 == 345678);
    assert(value_ts_2.t4 == 2e12);

    std::vector<int8_t> value_vector_int8_1(3);
    value_vector_int8_1[0] = 1;
    value_vector_int8_1[1] = 2;
    value_vector_int8_1[2] = 3;
    std::vector<int8_t> value_vector_int8_2(3);
    value_vector_int8_2[0] = 4;
    value_vector_int8_2[1] = 5;
    value_vector_int8_2[2] = 6;
    put(TARGET, value_vector_int8_1);
    get(TARGET, value_vector_int8_2);
    assert(value_vector_int8_2[0] == 1);
    assert(value_vector_int8_2[1] == 2);
    assert(value_vector_int8_2[2] == 3);

    std::vector<int32_t> value_vector_int32_1(3);
    value_vector_int32_1[0] = 987654;
    value_vector_int32_1[1] = 876543;
    value_vector_int32_1[2] = 765432;
    std::vector<int32_t> value_vector_int32_2;
    put(TARGET, value_vector_int32_1);
    get(TARGET, value_vector_int32_2);
    assert(value_vector_int32_2[0] == 987654);
    assert(value_vector_int32_2[1] == 876543);
    assert(value_vector_int32_2[2] == 765432);

    std::vector<int64_t> value_vector_int64_1(3);
    value_vector_int64_1[0] = 4e12;
    value_vector_int64_1[1] = 5e12;
    value_vector_int64_1[2] = 6e12;
    std::vector<int64_t> value_vector_int64_2;
    put(TARGET, value_vector_int64_1);
    get(TARGET, value_vector_int64_2);
    assert(value_vector_int64_2[0] == 4e12);
    assert(value_vector_int64_2[1] == 5e12);
    assert(value_vector_int64_2[2] == 6e12);

    std::vector<ts> value_vector_ts_1(3);
    value_vector_ts_1[0] = {
        .t1 = 'e',
        .t2 = 121,
        .t3 = 123321,
        .t4 = int64_t(7e12),
    };
    value_vector_ts_1[1] = {
        .t1 = 'f',
        .t2 = 232,
        .t3 = 234432,
        .t4 = int64_t(8e12),
    };
    value_vector_ts_1[2] = {
        .t1 = 'g',
        .t2 = 343,
        .t3 = 345543,
        .t4 = int64_t(9e12),
    };
    std::vector<ts> value_vector_ts_2;
    put(TARGET, value_vector_ts_1);
    get(TARGET, value_vector_ts_2);
    assert(value_vector_ts_2[0].t1 == 'e');
    assert(value_vector_ts_2[1].t1 == 'f');
    assert(value_vector_ts_2[2].t1 == 'g');
    assert(value_vector_ts_2[0].t2 == 121);
    assert(value_vector_ts_2[1].t2 == 232);
    assert(value_vector_ts_2[2].t2 == 343);
    assert(value_vector_ts_2[0].t3 == 123321);
    assert(value_vector_ts_2[1].t3 == 234432);
    assert(value_vector_ts_2[2].t3 == 345543);
    assert(value_vector_ts_2[0].t4 == 7e12);
    assert(value_vector_ts_2[1].t4 == 8e12);
    assert(value_vector_ts_2[2].t4 == 9e12);
}
